{
  "version": 3,
  "sources": ["../../../../shared/src/api/base44Client.js"],
  "sourcesContent": ["// Base44 HTTP client for data operations via Vercel API proxy\n\nconst BASE_URL = '';\nconst PROXY_URL = '/api/base44';\n\nconst makeRequest = async (method, url, body = null) => {\n  // Parse URL to extract path and query parameters\n  const urlObj = new URL(url, 'http://dummy.com'); // Use dummy base for relative URLs\n  const path = urlObj.pathname;\n  const query = {};\n  urlObj.searchParams.forEach((value, key) => {\n    query[key] = value;\n  });\n\n  const proxyBody = {\n    method,\n    path,\n    query: Object.keys(query).length > 0 ? query : undefined,\n    body\n  };\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(proxyBody)\n  };\n\n  console.log(`[Base44 Proxy] ${method} ${path}`);\n  if (body) {\n    console.log('[Base44 Proxy] Request body:', body);\n  }\n\n  try {\n    const response = await fetch(PROXY_URL, options);\n    console.log(`[Base44 Proxy] Response status: ${response.status} ${response.statusText}`);\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('[Base44 Proxy] Error response:', errorData);\n      throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error || 'Unknown error'}`);\n    }\n\n    if (method === 'DELETE') {\n      console.log('[Base44 Proxy] DELETE successful');\n      return true;\n    }\n\n    const data = await response.json();\n    console.log('[Base44 Proxy] Response data:', data);\n    return data;\n  } catch (error) {\n    console.error('[Base44 Proxy] Request failed:', error);\n    throw error;\n  }\n};\n\n// Helper function to sort array client-side based on sort parameter\nconst sortArray = (array, sort) => {\n  if (!sort || !Array.isArray(array)) return array;\n\n  const isDescending = sort.startsWith('-');\n  const field = isDescending ? sort.slice(1) : sort;\n\n  return array.sort((a, b) => {\n    let valA = a[field];\n    let valB = b[field];\n\n    // Handle null/undefined\n    if (valA == null && valB == null) return 0;\n    if (valA == null) return isDescending ? 1 : -1;\n    if (valB == null) return isDescending ? -1 : 1;\n\n    // Try numeric comparison\n    const numA = Number(valA);\n    const numB = Number(valB);\n    if (!isNaN(numA) && !isNaN(numB)) {\n      return isDescending ? numB - numA : numA - numB;\n    }\n\n    // String comparison\n    const strA = String(valA).toLowerCase();\n    const strB = String(valB).toLowerCase();\n    const comparison = strA.localeCompare(strB);\n    return isDescending ? -comparison : comparison;\n  });\n};\n\n// Create a Base44-based client that mimics the original structure\nexport const firebaseClient = {\n  entities: {},\n  auth: {},\n  integrations: {}\n};\n\n// List of entities to create operations for\nconst entities = [\n  'Player',\n  'School',\n  'Contact',\n  'TeamHistory',\n  'Tournament',\n  'TournamentParticipation',\n  'PlayerImage',\n  'Team',\n  'Coach',\n  'CoachAssignment',\n  'ParentPlayerAssignment',\n  'Payment',\n  'AdditionalFee',\n  'PaymentMethod',\n  'TeamFee',\n  'RecruitingInterest',\n  'AppUser',\n  'Notification'\n];\n\n// Helper function to create entity operations\nconst createEntityOperations = (entityName) => {\n  const baseUrl = `${BASE_URL}/${entityName}`;\n\n  return {\n    list: async (orderByField = null, limitCount = null) => {\n      const params = new URLSearchParams();\n      if (limitCount) {\n        params.append('limit', limitCount.toString());\n      }\n      const url = params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;\n      const response = await makeRequest('GET', url);\n      // Handle Base44 API response structure - if it's an object with data property, return the data array\n      let data = response && typeof response === 'object' && response.data ? response.data : response;\n      // Apply client-side sorting if orderByField is provided\n      if (orderByField) {\n        data = sortArray(data, orderByField);\n      }\n      return data;\n    },\n\n    filter: async (filters = {}, limitCount = null, sort = null) => {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n          params.append(key, value.toString());\n        }\n      });\n      if (limitCount) {\n        params.append('limit', limitCount.toString());\n      }\n      const url = params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;\n      const response = await makeRequest('GET', url);\n      // Handle Base44 API response structure - if it's an object with data property, return the data array\n      let data = response && typeof response === 'object' && response.data ? response.data : response;\n      // Apply client-side sorting if sort is provided\n      if (sort) {\n        data = sortArray(data, sort);\n      }\n      return data;\n    },\n\n    get: async (id) => {\n      const url = `${baseUrl}/${id}`;\n      return makeRequest('GET', url);\n    },\n\n    create: async (data) => {\n      return makeRequest('POST', baseUrl, data);\n    },\n\n    update: async (id, data) => {\n      const url = `${baseUrl}/${id}`;\n      return makeRequest('PUT', url, data);\n    },\n\n    delete: async (id) => {\n      const url = `${baseUrl}/${id}`;\n      return makeRequest('DELETE', url);\n    },\n\n    bulkCreate: async (items) => {\n      const results = [];\n      for (const item of items) {\n        const result = await this.create(item);\n        results.push(result);\n      }\n      return results;\n    }\n  };\n};\n\n// Create entity operations for each entity\nentities.forEach(entityName => {\n  firebaseClient.entities[entityName] = createEntityOperations(entityName);\n});\n\n// Add generic methods for compatibility (used by PlayerImage.js)\nfirebaseClient.entities.get = async (path, filters = {}, sort = null) => {\n  const url = `${BASE_URL}${path}`;\n  const params = new URLSearchParams();\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value !== null && value !== undefined) {\n      params.append(key, value.toString());\n    }\n  });\n  const fullUrl = params.toString() ? `${url}?${params.toString()}` : url;\n  const response = await makeRequest('GET', fullUrl);\n  // Handle Base44 API response structure - if it's an object with data property, return the data array\n  let data = response && typeof response === 'object' && response.data ? response.data : response;\n  // Apply client-side sorting if sort is provided and data is an array\n  if (sort && Array.isArray(data)) {\n    data = sortArray(data, sort);\n  }\n  return data;\n};\n\nfirebaseClient.entities.put = async (path, data) => {\n  const url = `${BASE_URL}${path}`;\n  return makeRequest('PUT', url, data);\n};\n\n// For backward compatibility, export as base44\nexport const base44 = firebaseClient;\n"],
  "mappings": "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",
  "names": []
}
