// ../shared/src/api/base44Client.js
var BASE_URL = "";
var PROXY_URL = "/api/base44";
var makeRequest = async (method, url, body = null) => {
  const urlObj = new URL(url, "http://dummy.com");
  const path = urlObj.pathname;
  const query = {};
  urlObj.searchParams.forEach((value, key) => {
    query[key] = value;
  });
  const proxyBody = {
    method,
    path,
    query: Object.keys(query).length > 0 ? query : void 0,
    body
  };
  const options = {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(proxyBody)
  };
  console.log(`[Base44 Proxy] ${method} ${path}`);
  if (body) {
    console.log("[Base44 Proxy] Request body:", body);
  }
  try {
    const response = await fetch(PROXY_URL, options);
    console.log(`[Base44 Proxy] Response status: ${response.status} ${response.statusText}`);
    if (!response.ok) {
      const errorData = await response.json();
      console.error("[Base44 Proxy] Error response:", errorData);
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error || "Unknown error"}`);
    }
    if (method === "DELETE") {
      console.log("[Base44 Proxy] DELETE successful");
      return true;
    }
    const data = await response.json();
    console.log("[Base44 Proxy] Response data:", data);
    return data;
  } catch (error) {
    console.error("[Base44 Proxy] Request failed:", error);
    throw error;
  }
};
var sortArray = (array, sort) => {
  if (!sort || !Array.isArray(array)) return array;
  const isDescending = sort.startsWith("-");
  const field = isDescending ? sort.slice(1) : sort;
  return array.sort((a, b) => {
    let valA = a[field];
    let valB = b[field];
    if (valA == null && valB == null) return 0;
    if (valA == null) return isDescending ? 1 : -1;
    if (valB == null) return isDescending ? -1 : 1;
    const numA = Number(valA);
    const numB = Number(valB);
    if (!isNaN(numA) && !isNaN(numB)) {
      return isDescending ? numB - numA : numA - numB;
    }
    const strA = String(valA).toLowerCase();
    const strB = String(valB).toLowerCase();
    const comparison = strA.localeCompare(strB);
    return isDescending ? -comparison : comparison;
  });
};
var firebaseClient = {
  entities: {},
  auth: {},
  integrations: {}
};
var entities = [
  "Player",
  "School",
  "Contact",
  "TeamHistory",
  "Tournament",
  "TournamentParticipation",
  "PlayerImage",
  "Team",
  "Coach",
  "CoachAssignment",
  "ParentPlayerAssignment",
  "Payment",
  "AdditionalFee",
  "PaymentMethod",
  "TeamFee",
  "RecruitingInterest",
  "AppUser",
  "Notification"
];
var createEntityOperations = (entityName) => {
  const baseUrl = `${BASE_URL}/${entityName}`;
  return {
    list: async (orderByField = null, limitCount = null) => {
      const params = new URLSearchParams();
      if (limitCount) {
        params.append("limit", limitCount.toString());
      }
      const url = params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;
      const response = await makeRequest("GET", url);
      let data = response && typeof response === "object" && response.data ? response.data : response;
      if (orderByField) {
        data = sortArray(data, orderByField);
      }
      return data;
    },
    filter: async (filters = {}, limitCount = null, sort = null) => {
      const params = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== null && value !== void 0) {
          params.append(key, value.toString());
        }
      });
      if (limitCount) {
        params.append("limit", limitCount.toString());
      }
      const url = params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;
      const response = await makeRequest("GET", url);
      let data = response && typeof response === "object" && response.data ? response.data : response;
      if (sort) {
        data = sortArray(data, sort);
      }
      return data;
    },
    get: async (id) => {
      const url = `${baseUrl}/${id}`;
      return makeRequest("GET", url);
    },
    create: async (data) => {
      return makeRequest("POST", baseUrl, data);
    },
    update: async (id, data) => {
      const url = `${baseUrl}/${id}`;
      return makeRequest("PUT", url, data);
    },
    delete: async (id) => {
      const url = `${baseUrl}/${id}`;
      return makeRequest("DELETE", url);
    },
    bulkCreate: async (items) => {
      const results = [];
      for (const item of items) {
        const result = await (void 0).create(item);
        results.push(result);
      }
      return results;
    }
  };
};
entities.forEach((entityName) => {
  firebaseClient.entities[entityName] = createEntityOperations(entityName);
});
firebaseClient.entities.get = async (path, filters = {}, sort = null) => {
  const url = `${BASE_URL}${path}`;
  const params = new URLSearchParams();
  Object.entries(filters).forEach(([key, value]) => {
    if (value !== null && value !== void 0) {
      params.append(key, value.toString());
    }
  });
  const fullUrl = params.toString() ? `${url}?${params.toString()}` : url;
  const response = await makeRequest("GET", fullUrl);
  let data = response && typeof response === "object" && response.data ? response.data : response;
  if (sort && Array.isArray(data)) {
    data = sortArray(data, sort);
  }
  return data;
};
firebaseClient.entities.put = async (path, data) => {
  const url = `${BASE_URL}${path}`;
  return makeRequest("PUT", url, data);
};
var base44 = firebaseClient;

export {
  firebaseClient,
  base44
};
//# sourceMappingURL=chunk-V5K472MA.js.map
